/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Heart.gltf 
*/

import React, { useRef } from 'react'
import { useFrame } from "@react-three/fiber"
import { MeshTransmissionMaterial, useGLTF } from '@react-three/drei'

export default function Model({ waveform, ...props }) {
  const { nodes, materials } = useGLTF('/Heart.gltf')
  const ref = useRef();

  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
    ref.current.rotation.x = Math.cos(t / 4) / 16
    ref.current.rotation.y = Math.sin(t / 4) / 16

    ref.current.rotation.y = (1 + Math.sin(t / 1.5)) / 10

    // Scaling - adds a scale-up and scale-down effect
    const scaleFactor = 1 + Math.sin(t * 2) * 0.2  // Scale oscillation, multiplying to create a noticeable effect
    ref.current.scale.set(scaleFactor, scaleFactor, scaleFactor) // Apply scale in all axes

  })

  return (
    <group {...props} dispose={null}>
      <mesh ref={ref} geometry={nodes.Cube.geometry}>
        <MeshTransmissionMaterial
          backside
          backsideThickness={1}
          samples={32}
          thickness={0.2}
          anisotropicBlur={0.1}
          iridescence={1}
          iridescenceIOR={1}
          iridescenceThicknessRange={[0, 1400]}
          clearcoat={1}
          clearcoatRoughness={0}
          envMapIntensity={0.5}
          // Use the waveform colour parsed from App.jsx
          color={waveform}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/Heart.gltf')
